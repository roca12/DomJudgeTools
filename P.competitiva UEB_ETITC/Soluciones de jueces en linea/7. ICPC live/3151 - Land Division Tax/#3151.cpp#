/*
  Problem: 3151 - Land Division Tax
  Author: AndrÅÈs MejÅÌa-Posada
  (http://blogaritmo.factorcomun.org)

 */

using namespace std;
#include <algorithm>
#include <iostream>
#include <iterator>
#include <sstream>
#include <fstream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>

#define D(x) cout << #x " is " << x << endl

/*
O(n^2)
 
dp[i][j] = MÅÌnimo costo de partir la cadena entre las particiones i e j, ambas incluÅÌdas.
pivot[i][j] = ÅÕndice de la particiÅÛn que usÅÈ para lograr dp[i][j].
*/
int dp[1005][1005], pivot[1005][1005];
int p[1005], sum[1005];

int n;
double f; 

int price(){

  sum[0] = p[0];
  for (int i=1; i<n; ++i)
    sum[i] = sum[i-1] + p[i];

    for (int i=0; i<n; ++i){
      dp[i][i] = 0;
    }
    for (int i=0; i<m-1; ++i){
      dp[i][i+1] = f * max(p[i], p[i+1]);
      pivot[i][i+1] = i;
    }
    
    for (int d=2; d<n; ++d){ //d = longitud
      for (int j, i=0; (j = i + d) < n; ++i){

	int t = INT_MAX, s;
	for (int k=pivot[i][j-1]; k<=pivot[i+1][j]; ++k){
	  int x = dp[i][k] + dp[k+1][j];
	  if (x < t) t = x, s = k;
	}
	dp[i][j] += t, pivot[i][j] = s;
      }
    }
 
    printf("%d\n", dp[0][m-1]);
  }
  return 0;
}
 

int main(){
  while (cin >> n >> f && n){
    
  }
  return 0;
}
